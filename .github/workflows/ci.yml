name: CI

on:
  push:
    branches:
      - main
      - dev
      - stg
  workflow_dispatch:
    inputs:
      buildType:
        description: 'Build type (all, affected, or project names)'
        required: false
        default: 'affected'

permissions:
  actions: read
  contents: read

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    # Automatically use the GitHub environment based on the branch name
    environment: ${{ github.ref_name }}

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up Node.js environment
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # Set commit SHAs for Nx
      - uses: nrwl/nx-set-shas@v4

      # Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Authenticate to Google Container Registry
        run: gcloud auth configure-docker

      # Install dependencies
      - run: npm ci --legacy-peer-deps

      # Lint, test, and build affected applications
      # - run: npx nx affected -t lint test build
      - run: npx nx run-many -t build -p frontend backend


      - name: Build, Push, and Deploy Docker Images
        run: |
          for app in frontend backend; do
            app_name="${{ secrets.APP_NAME }}-${{ github.ref_name }}-$app"
            image="gcr.io/${{ secrets.PROJECT_ID }}/${app_name}:latest"
            service_name="$app_name-service"
            
            echo "Building Docker image for $app..."
            docker build -t $image --build-arg APP=$app -f apps/$app/Dockerfile .
            docker push $image
      
            echo "Deploying $app to Cloud Run..."
            # Create a list of environment variables to set
            # env_vars=$(cat .env.$app | xargs)
      
            # Deploy to Cloud Run
            gcloud run deploy $service_name --image $image --region=${{ secrets.REGION }} --quiet
          done
