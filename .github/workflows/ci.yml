name: CI

on:
  push:
    branches:
      - main
      - dev
      - stg
  workflow_dispatch:
    inputs:
      buildType:
        description: 'Build type (all, affected, or project names)'
        required: false
        default: 'affected'

permissions:
  actions: read
  contents: read

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    # Automatically use the GitHub environment based on the branch name
    environment: ${{ github.ref_name }}

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up Node.js environment
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # Set commit SHAs for Nx
      - uses: nrwl/nx-set-shas@v4

      # Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Authenticate to Google Container Registry
        run: gcloud auth configure-docker

      # Install dependencies
      - run: npm ci --legacy-peer-deps

      - name: Determine Projects to Build
        id: determine_projects
        run: |
          BUILD_TYPE="${{ inputs.buildType || 'affected' }}"
          CMD="npx nx show projects --type app --exclude=cdk,api"
      
          [[ "$BUILD_TYPE" == "all" ]] && FLAG="" || FLAG="--affected --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}"
          [[ "$BUILD_TYPE" != "all" && "$BUILD_TYPE" != "affected" ]] && PROJECTS="$BUILD_TYPE" || PROJECTS=$($CMD $FLAG 2>/dev/null | tr '\n' ',' | sed 's/,$//')
      
          echo "PROJECTS_TO_BUILD=$PROJECTS" >> $GITHUB_ENV
          echo "Determined Projects to Build: $PROJECTS"


      # Lint, test, and build affected applications
      # - run: npx nx affected -t lint test build
          
      - name: Build, Push, and Deploy Docker Images
        env:
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
        if: env.PROJECTS_TO_BUILD != ''
        run: |
          declare -A ENV_VARS=(
            [frontend]="API_BASE_URL=${{ secrets.API_BASE_URL }}"
            [backend]="MONGOOSE_URI=${{ secrets.MONGOOSE_URI }},JWT_SECRET=${{ secrets.JWT_SECRET }},FORGOT_PASSWORD_JWT_SECRET=${{ secrets.FORGOT_PASSWORD_JWT_SECRET }},REFRESH_TOKEN_JWT_SECRET=${{ secrets.REFRESH_TOKEN_JWT_SECRET }},FRONTEND_BASE_URL=${{ secrets.FRONTEND_BASE_URL }},SMTP_HOST=${{ secrets.SMTP_HOST }},SMTP_PORT=${{ secrets.SMTP_PORT }},SMTP_USER=${{ secrets.SMTP_USER }},SMTP_PASS=${{ secrets.SMTP_PASS }}"
          )

          npx nx run-many -t gcp-deploy -p "${{ env.PROJECTS_TO_BUILD }}" --parallel --maxParallel=5 \
          --appName="${{ secrets.APP_NAME }}" --environment="${{ github.ref_name }}" --projectId="${{ secrets.PROJECT_ID }}" \
          --region="${{ secrets.REGION }}" --envVars="$ENV_VARS"